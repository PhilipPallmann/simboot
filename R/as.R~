> Simpsonci
function (X, f, cmat = NULL, type = "Dunnett", alternative = "two.sided", 
    conf.level = 0.95, dist = "MVN", ...) 
{
    aargs <- list(...)
    type <- match.arg(type, choices = c("Dunnett", "Tukey", "Sequen"))
    alternative <- match.arg(alternative, choices = c("two.sided", 
        "less", "greater"))
    if (length(conf.level) != 1) {
        stop("argument conf.level should be a single numeric value")
    }
    if (conf.level <= 0.5 | conf.level >= 1) {
        stop("argument conf.level should be a single numeric value between 0.5 and 1")
    }
    if (!is.numeric(conf.level)) {
        stop("argument conf.level should be a single numeric value")
    }
    if (!is.data.frame(X)) {
        stop("X must be of an object of class 'data.frame'")
    }
    if (!is.factor(f)) {
        f <- as.factor(f)
    }
    k <- length(levels(f))
    if (k <= 1) {
        stop("The factor variable f should have at least 2 levels to be compared")
    }
    esti <- estSimpsonf(X = X, f = as.factor(f))
    n <- apply(X = esti$table, MARGIN = 1, FUN = sum)
    if (is.null(cmat)) {
        if (is.null(aargs$base)) {
            base <- 1
        }
        else {
            base <- aargs$base
        }
        cmat <- contrMat(n = n, type = type, base = base)
    }
    else {
        if (ncol(cmat) != k) {
            stop("Number of columns in cmat should be the same as the number of levels in f")
        }
    }
    out <- Waldci(cmat = cmat, estp = esti$estimate, varp = esti$varest, 
        varcor = esti$varest, alternative = alternative, conf.level = conf.level, 
        dist = dist)
    TAB <- esti$table
    estimate <- cmat %*% matrix(esti$estimate, ncol = 1)
    out$estimate <- estimate
    out$cmat <- cmat
    out$methodname <- "Confidence intervals for differences of Simpsons Indices"
    out$sample.estimates <- esti
    class(out) <- c("Simpsonci", "sci")
    return(out)
}
